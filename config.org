#+title: Config
#+PROPERTY: header-args :tangle config.el

Literate configuration for my Doom Emacs. This config extends Doom. No ~sync~ is required after modifying this file.

* Personal Information
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.

#+begin_src elisp
(setq user-full-name "Shivek Khurana"
      user-mail-address "khuranashivek@gmail.com")
#+end_src

* Quality of Life enhancements
** Delete files by moving to trash
Not like a rogue ~rm~

#+begin_src elisp
(setq delete-by-moving-to-trash t)
#+end_src

** Increase undo limit
Set the undo limit to 80 mb

#+begin_src elisp
(setq undo-limit 80000000)
#+end_src

** Fine undo
By default while in insert all changes are one big blob. Be more granular

#+begin_src elisp
(setq evil-want-fine-undo t)
#+end_src

** Auto save
#+begin_src elisp
(setq auto-save-default t)
#+end_src
** Make ~w~ cycle through CamelCasedSymbols
#+begin_src elisp
(global-subword-mode 1)
#+end_src

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

- ~doom-font~ -- the primary font to use
- ~doom-variable-pitch-font~ -- a non-monospace font (where applicable)
- ~doom-big-font~ -- used for `doom-big-font-mode'; use this for
  presentations or streaming.
- ~doom-unicode-font~ -- for unicode glyphs
- ~doom-serif-font~ -- for the `fixed-pitch-serif' face

See ~C-h v doom-font~ for documentation and more examples of what they
accept. For example:

#+begin_src elisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 14 :weight 'normal)
      doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 14)
      doom-unicode-font (font-spec :family "Apple Color Emoji" :size 14))
#+end_src

If you or Emacs can't find your font, use ~M-x describe-font~ to look them
up, ~M-x eval-region~ to execute elisp code, and ~M-x doom/reload-font~ to
refresh your font settings. If Emacs still can't find your font, it likely
wasn't installed correctly. Font issues are rarely Doom issues!

* Theme
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set ~doom-theme~ or manually load a theme with the
~load-theme~ function. This is the default:

#+begin_src elisp
(setq doom-theme 'doom-dracula)
#+end_src

This determines the style of line numbers in effect. If set to ~nil~, line
numbers are disabled. For relative line numbers, set this to ~relative~.

#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

* Splash Image
Setup a knot as a splash screen. A constant reminder of complexity and code.

#+begin_src elisp
;; Get all files in splash folder as alternatives
(let ((alternatives (directory-files (expand-file-name "splash/") nil "^\\([^.]\\|\\.[^.]\\|\\.\\..\\)")))
  (setq fancy-splash-image
        (concat doom-user-dir "splash/"
                (nth (random (length alternatives)) alternatives))))
#+end_src

* Inspirations
- [[https://github.com/tecosaur/emacs-config/blob/master/config.org][Tecosour]]
* Org
Org mode is a text based system to clarify thoughts. It also includes a nifty task management system. Unlike other todo softwares, that are centered around todos, Org is centered around text or ideas.

Tasks organically evolve from these ideas, and can be managed using an Agenda.

** TODO Solidify Organisation Strategy
** Store Org files in the time-machine
If you use ~org~ and don't want your org files in the default location below,
change ~org-directory~. It must be set before org loads!

#+begin_src elisp
(setq org-directory "~/Wip/time-machine/org")
#+end_src

** Org mode basics

#+begin_src elisp
(setq org-log-done 'time ; set a time when a task was complete
      org-log-into-drawer "LOGBOOK" ; save state changes in ~:LOGBOOK:~ drawer
      org-pretty-entities t)
#+end_src

** Agenda
Org's agenda is a sophesticated view on top of all TODOs in the system

Start agenda in log mode and show clocked items, closed items and state changes on agenda
#+begin_src elisp
(setq org-agenda-start-with-log-mode t
      org-agenda-log-mode-items '(closed clock state))
#+end_src

* Notes from Doom
Whenever you reconfigure a package, make sure to wrap your config in an
~after!~ block, otherwise Doom's defaults may override your settings. E.g.

#+begin_src elisp
;; (after! PACKAGE
;;  (setq x y))
#+end_src

The exceptions to this rule:

- Setting file/directory variables (like ~org-directory~)
- Setting variables which explicitly tell you to set them before their
  package is loaded (see ~C-h v VARIABLE~ to look up their documentation).
- Setting doom variables (which start with ~doom-~ or ~+~).

Here are some additional functions/macros that will help you configure Doom.

- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the ~load-path~, relative to
  this file. Emacs searches the ~load-path~ when you load packages with
  ~require~ or ~use-package~.
- ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press ~K~ (non-evil users must press ~C-c c k~).
This will open documentation for it, including demos of how they are used.
Alternatively, use ~C-h o~ to look up a symbol (functions, variables, faces,
etc).

You can also try ~gd~ (or ~C-c c d~) to jump to their definition and see how
they are implemented.
